{"remainingRequest":"/home/anuradha/sachin-master-blaster/node_modules/babel-loader/lib/index.js!/home/anuradha/sachin-master-blaster/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/anuradha/sachin-master-blaster/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anuradha/sachin-master-blaster/src/views/BattingODI.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anuradha/sachin-master-blaster/src/views/BattingODI.vue","mtime":1560548639291},{"path":"/home/anuradha/sachin-master-blaster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Chart from '@/components/Chart.vue';\nimport Inference from '@/components/Inference.vue';\nimport PlayerDetailsCard from '@/components/PlayerDetailsCard.vue';\nimport location_bat_odi from \"../../json/locationbattingODI.json\";\nexport default {\n  name: 'battingODI',\n  components: {\n    Chart: Chart,\n    Inference: Inference,\n    PlayerDetailsCard: PlayerDetailsCard\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      chartContainerStyle: {\n        margin: '10px',\n        width: '45vw',\n        display: 'inline-block'\n      },\n      AvgOverInngsData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0\n              },\n              gridLines: {\n                offsetGridLines: true\n              },\n              barThickness: 50\n            }]\n          },\n          onClick: function onClick(evt, item) {\n            if (item && item[0] && item[0]._index != null) {\n              _this.focusedPlayerBatting = location_bat_odi[item[0]._index];\n            }\n          }\n        },\n        data: {\n          labels: [],\n          datasets: []\n        }\n      },\n      HomeAwayScoreData: {\n        options: {\n          responsive: true\n        },\n        data: {\n          labels: [],\n          datasets: []\n        }\n      },\n      ConversionToCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true\n            }],\n            yAxes: [{\n              stacked: true\n            }]\n          }\n        },\n        data: {\n          labels: [],\n          datasets: []\n        }\n      },\n      ConversionToDoubleCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true\n            }],\n            yAxes: [{\n              stacked: true\n            }]\n          }\n        },\n        data: {\n          labels: [],\n          datasets: []\n        }\n      },\n      StrikeRateData: {\n        options: {\n          responsive: true\n        },\n        data: {\n          labels: [],\n          datasets: []\n        }\n      },\n      BoundariesData: {\n        options: {\n          responsive: true //   scales: {\n          //     xAxes: [{\n          //         stacked: true\n          //     }],\n          //     yAxes: [{\n          //         stacked: true\n          //     }]\n          //  }\n\n        },\n        data: {\n          labels: [],\n          datasets: []\n        }\n      },\n      MomData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0\n              },\n              gridLines: {\n                offsetGridLines: true\n              },\n              barThickness: 50\n            }]\n          }\n        },\n        data: {\n          labels: [],\n          datasets: []\n        }\n      },\n      focusedPlayerBatting: null\n    };\n  },\n  mounted: function mounted() {\n    var avgOverInngsData = [];\n    Object.values(location_bat_odi).forEach(function (player) {\n      avgOverInngsData.push({\n        name: player.player_name,\n        avg: player.details.total.avg\n      });\n    });\n    avgOverInngsData.sort(function (t1, t2) {\n      return t2.avg - t1.avg;\n    });\n    this.AvgOverInngsData.data = {\n      labels: avgOverInngsData.map(function (t) {\n        return t.name;\n      }),\n      datasets: [{\n        label: 'Average Runs of all Matches',\n        data: avgOverInngsData.map(function (t) {\n          return t.avg;\n        }),\n        backgroundColor: ['rgb(255, 224, 230, 0.5)', 'rgb(255, 226, 217, 0.5)', 'rgb(255, 245, 221, 0.5)', 'rgb(219, 242, 242, 0.5)', 'rgb(215, 236, 251, 0.5)', 'rgb(235, 224, 255, 0.5)', 'rgb(244, 245, 245, 0.5)'],\n        borderWidth: 0.8,\n        borderColor: ['rgb(255, 99, 132, 1)', 'rgb(255, 159, 64, 1)', 'rgb(255, 205, 86, 1)', 'rgb(75, 192, 192, 1)', 'rgb(54, 162, 235, 1)', 'rgb(153, 102, 255, 1)', 'rgb(201, 203, 207, 1)'],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: ['rgb(255, 99, 132, 1)', 'rgb(255, 159, 64, 1)', 'rgb(255, 205, 86, 1)', 'rgb(75, 192, 192, 1)', 'rgb(54, 162, 235, 1)', 'rgb(153, 102, 255, 1)', 'rgb(201, 203, 207, 1)']\n      }]\n    };\n    var homeAwayScoreData = [];\n    Object.values(location_bat_odi).forEach(function (player) {\n      homeAwayScoreData.push({\n        name: player.player_name,\n        awayAvg: player.details.away.avg,\n        homeAvg: player.details.home.avg\n      });\n    });\n    this.HomeAwayScoreData.data = {\n      labels: homeAwayScoreData.map(function (t) {\n        return t.name;\n      }),\n      datasets: [{\n        label: 'Away',\n        data: homeAwayScoreData.map(function (t) {\n          return t.awayAvg;\n        }),\n        backgroundColor: 'rgb(255, 224, 230, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(255, 99, 132, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(255, 99, 132, 1)'\n      }, {\n        label: 'Home',\n        data: homeAwayScoreData.map(function (t) {\n          return t.homeAvg;\n        }),\n        backgroundColor: 'rgb(219, 242, 242, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(75, 192, 192, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(75, 192, 192, 1)'\n      }]\n    };\n    var conversionToCenturyData = [];\n    Object.values(location_bat_odi).forEach(function (player) {\n      conversionToCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        fifties: player.details.total.fifties\n      });\n    });\n    this.ConversionToCenturyData.data = {\n      labels: conversionToCenturyData.map(function (t) {\n        return t.name;\n      }),\n      datasets: [{\n        label: 'Half Century',\n        data: conversionToCenturyData.map(function (t) {\n          return t.fifties;\n        }),\n        backgroundColor: 'rgb(255, 224, 230, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(255, 99, 132, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(255, 99, 132, 1)'\n      }, {\n        label: 'Century',\n        data: conversionToCenturyData.map(function (t) {\n          return t.hundreds;\n        }),\n        backgroundColor: 'rgb(219, 242, 242, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(75, 192, 192, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(75, 192, 192, 1)'\n      }]\n    };\n    var conversionToDoubleCenturyData = [];\n    Object.values(location_bat_odi).forEach(function (player) {\n      conversionToDoubleCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        doublecentury: player.details.total.doublecentury\n      });\n    });\n    this.ConversionToDoubleCenturyData.data = {\n      labels: conversionToDoubleCenturyData.map(function (t) {\n        return t.name;\n      }),\n      datasets: [{\n        label: 'Century',\n        data: conversionToDoubleCenturyData.map(function (t) {\n          return t.hundreds;\n        }),\n        backgroundColor: 'rgb(255, 226, 217, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(255, 159, 64, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(255, 159, 64, 1)'\n      }, {\n        label: 'Double Century',\n        data: conversionToDoubleCenturyData.map(function (t) {\n          return t.doublecentury;\n        }),\n        backgroundColor: 'rgb(215, 236, 251, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(54, 162, 235, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(54, 162, 235, 1)'\n      }]\n    };\n    var strikeRateData = [];\n    Object.values(location_bat_odi).forEach(function (player) {\n      strikeRateData.push({\n        name: player.player_name,\n        strike_rate: player.details.total.strike_rate\n      });\n    });\n    strikeRateData.sort(function (t1, t2) {\n      return t2.strike_rate - t1.strike_rate;\n    });\n    this.StrikeRateData.data = {\n      labels: strikeRateData.map(function (t) {\n        return t.name;\n      }),\n      datasets: [{\n        label: 'Strike Rate',\n        data: strikeRateData.map(function (t) {\n          return t.strike_rate;\n        }),\n        backgroundColor: ['rgb(219, 242, 242, 0.5)', 'rgb(215, 236, 251, 0.5)', 'rgb(235, 224, 255, 0.5)', 'rgb(255, 224, 230, 0.5)', 'rgb(255, 226, 217, 0.5)', 'rgb(255, 245, 221, 0.5)', 'rgb(244, 245, 245, 0.5)'],\n        borderWidth: 0.8,\n        borderColor: ['rgb(75, 192, 192, 1)', 'rgb(54, 162, 235, 1)', 'rgb(153, 102, 255, 1)', 'rgb(255, 99, 132, 1)', 'rgb(255, 159, 64, 1)', 'rgb(255, 205, 86, 1)', 'rgb(201, 203, 207, 1)'],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: ['rgb(75, 192, 192, 1)', 'rgb(54, 162, 235, 1)', 'rgb(153, 102, 255, 1)', 'rgb(255, 99, 132, 1)', 'rgb(255, 159, 64, 1)', 'rgb(255, 205, 86, 1)', 'rgb(201, 203, 207, 1)']\n      }]\n    };\n    var boundariesData = [];\n    Object.values(location_bat_odi).forEach(function (player) {\n      boundariesData.push({\n        name: player.player_name,\n        fours: player.details.total.fours,\n        sixes: player.details.total.sixes\n      });\n    });\n    this.BoundariesData.data = {\n      labels: boundariesData.map(function (t) {\n        return t.name;\n      }),\n      datasets: [{\n        label: 'Fours',\n        data: boundariesData.map(function (t) {\n          return t.fours;\n        }),\n        backgroundColor: 'rgb(255, 226, 217, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(255, 159, 64, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(255, 159, 64, 1)'\n      }, {\n        label: 'Sixes',\n        data: boundariesData.map(function (t) {\n          return t.sixes;\n        }),\n        backgroundColor: 'rgb(215, 236, 251, 0.5)',\n        borderWidth: 0.5,\n        borderColor: 'rgb(54, 162, 235, 1)',\n        hoverBorderWidth: 1,\n        hoverBorderColor: 'rgb(54, 162, 235, 1)'\n      }]\n    };\n    var momData = [];\n    Object.values(location_bat_odi).forEach(function (player) {\n      momData.push({\n        name: player.player_name,\n        mom: player.details.total.mom\n      });\n    });\n    momData.sort(function (t1, t2) {\n      return t2.mom - t1.mom;\n    });\n    this.MomData.data = {\n      labels: momData.map(function (t) {\n        return t.name;\n      }),\n      datasets: [{\n        label: 'Man of Match',\n        data: momData.map(function (t) {\n          return t.mom;\n        }),\n        backgroundColor: ['rgb(255, 224, 230, 0.5)', 'rgb(215, 236, 251, 0.5)', 'rgb(255, 226, 217, 0.5)', 'rgb(255, 245, 221, 0.5)', 'rgb(219, 242, 242, 0.5)', 'rgb(235, 224, 255, 0.5)', 'rgb(244, 245, 245, 0.5)'],\n        borderWidth: 0.8,\n        borderColor: ['rgb(255, 99, 132, 1)', 'rgb(54, 162, 235, 1)', 'rgb(255, 159, 64, 1)', 'rgb(255, 205, 86, 1)', 'rgb(75, 192, 192, 1)', 'rgb(153, 102, 255, 1)', 'rgb(201, 203, 207, 1)'],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: ['rgb(255, 99, 132, 1)', 'rgb(54, 162, 235, 1)', 'rgb(255, 159, 64, 1)', 'rgb(255, 205, 86, 1)', 'rgb(75, 192, 192, 1)', 'rgb(153, 102, 255, 1)', 'rgb(201, 203, 207, 1)']\n      }]\n    };\n  }\n};",{"version":3,"sources":["BattingODI.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"batting-odi\">\n\n        <div class=\"card center\">\n          <span class=\"title-imp\">Important factors in ODI format</span>\n          <hr>\n          <br>\n          <span class=\"result-ps\">1. <b>Strike Rate</b> plays an important role in the\n            One Day format since it is equally important to score big runs as well\n            score them fast\n          </span>\n          <span class=\"result-ps\">2. <b>Number of 6's and 4's</b> provide runs faster\n            compared to non-boundaries and hence are prefferable when you have to score fast\n          </span>\n        </div>\n\n        <el-tag class=\"tags bottomtags\">\n          <b>Consistency of Player:</b>\n          Average runs, Runs at Home VS Away matches & ICC Ranking\n        </el-tag>\n        <div class=\"card\">\n            <PlayerDetailsCard :person=\"focusedPlayerBatting\" />\n            <Chart\n            titleText=\"Average Runs Scored\"\n            subTitleText=\"A good average score of all matches is what makes a player dependable\"\n            chartType=\"bar\"\n            :chartData=\"AvgOverInngsData.data\"\n            :chartOptions=\"AvgOverInngsData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Michael Bevan\"\n            titleText=\"average runs scored\"\n            />\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Avg Runs Scored (Home vs Away)\"\n            subTitleText=\"Let's see which player is durable under pressure\"\n            chartType=\"horizontalBar\"\n            :chartData=\"HomeAwayScoreData.data\"\n            :chartOptions=\"HomeAwayScoreData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"Under pressure, Sir Viv Richards outperforms every other player by a\n                       significant margin. Michael Bevan doesn’t care much, he will consistently\n                       perform as he usually does.\"\n            winner=\"Sir Viv Richards\"\n            titleText=\"scoring under pressure\"\n            />\n            <br/>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Home Score\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Score of a player when he scores in the country of his nationality\">\n              <el-button slot=\"reference\">Define Home Score</el-button>\n            </el-popover>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Away Score\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Score of a player when he scores in the country in whose oppsition he's playing\">\n              <el-button slot=\"reference\">Define Away Score</el-button>\n            </el-popover>\n        </div>\n\n        <el-tag class=\"tags bottomtags\"><b>Player Dominance:</b> Conversion rate of 50s into 100s, 100s into 200s & Man of the Match Awards </el-tag>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Conversion of 50s to 100s\"\n            subTitleText=\"Let's find ability of a player to play big knocks and provide the team\n                          with the winning runs\"\n            chartType=\"horizontalBar\"\n            :chartData=\"ConversionToCenturyData.data\"\n            :chartOptions=\"ConversionToCenturyData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"It is clearly evident that Sachin Tendulkar is the player who once settled,\n                       goes for the big runs. So it is advisable to restrict him before 50 otherwise\n                       he is more likely to convert that 50 into 100.\"\n            winner=\"Sachin Tendulkar\"\n            titleText=\"scoring big runs\"\n            />\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Con 100s to 200s\"\n            subTitleText=\"Let's see who can score a double century\"\n            chartType=\"horizontalBar\"\n            :chartData=\"ConversionToDoubleCenturyData.data\"\n            :chartOptions=\"ConversionToDoubleCenturyData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"Only Sachin Tendulkar is the player made a double century in ODI.\"\n            winner=\"Sachin Tendulkar\"\n            titleText=\"scoring big runs\"\n            />\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Man of the Match Awards\"\n            subTitleText=\"Most number of Man of the Match Awards determine your winning contribution\"\n            chartType=\"bar\"\n            :chartData=\"MomData.data\"\n            :chartOptions=\"MomData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar\"\n            titleText=\"being winning contributor maximum times\"\n            />\n        </div>\n\n        <el-tag class=\"tags bottomtags\"><b>Hitting Strength:</b> Strike Rate, Number of Boundaries </el-tag>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Strike Rate\"\n            subTitleText=\"Scoring runs faster in ODI is primary target\"\n            chartType=\"bar\"\n            :chartData=\"StrikeRateData.data\"\n            :chartOptions=\"StrikeRateData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"both Sir Viv Richards & Sachin Tendulkar\"\n            titleText=\"having high strike rate\"\n            />\n            <br/>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Strike Rate\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Batting strike rate is a measure of how frequently a batsman achieves the primary\n                       goal of batting, namely scoring runs\">\n              <el-button slot=\"reference\">Define Strike rate</el-button>\n            </el-popover>\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Number of 4's & 6's\"\n            subTitleText=\"A player who hits more boundaries will score runs faster\"\n            chartType=\"horizontalBar\"\n            :chartData=\"BoundariesData.data\"\n            :chartOptions=\"BoundariesData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"Sachin Tendulkar likes to send the balls out of the ground, scoring most of his\n                       runs with 4's & 6's\"\n            winner=\"Sachin Tendulkar\"\n            titleText=\"hitting most boundaries\"\n            />\n        </div>\n\n        <div class=\"card center\">\n          <h1>The ODI verdict - Batting</h1>\n          <span class=\"result\"> Sachin Tendulkar Wins !! </span>\n          <span class=\"result-ps\">\n            Maximum number of wins in individual components is by Sachin Tendulkar.\n            <br>\n            Also, he's the one to win in Strike rate and other important factors of\n            ODI batting.\n          </span>\n        </div>\n\n    </div>\n</template>\n\n<script>\nimport Chart from '@/components/Chart.vue';\nimport Inference from '@/components/Inference.vue';\nimport PlayerDetailsCard from '@/components/PlayerDetailsCard.vue';\n\nimport location_bat_odi from '../../json/locationbattingODI.json';\n\nexport default {\n  name: 'battingODI',\n  components: {\n    Chart,\n    Inference,\n    PlayerDetailsCard,\n  },\n  data() {\n    return {\n      chartContainerStyle: {\n        margin: '10px',\n        width: '45vw',\n        display: 'inline-block',\n      },\n      AvgOverInngsData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n          onClick: (evt, item) => {\n            if (item && item[0] && item[0]._index != null) {\n              this.focusedPlayerBatting = location_bat_odi[item[0]._index];\n            }\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      HomeAwayScoreData: {\n        options: {\n          responsive: true,\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      ConversionToCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n            }],\n            yAxes: [{\n              stacked: true,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      ConversionToDoubleCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n            }],\n            yAxes: [{\n              stacked: true,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      StrikeRateData: {\n        options: {\n          responsive: true,\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      BoundariesData: {\n        options: {\n          responsive: true,\n        //   scales: {\n        //     xAxes: [{\n        //         stacked: true\n        //     }],\n        //     yAxes: [{\n        //         stacked: true\n        //     }]\n        //  }\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      MomData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      focusedPlayerBatting: null,\n    };\n  },\n  mounted() {\n    const avgOverInngsData = [];\n    Object.values(location_bat_odi).forEach((player) => {\n      avgOverInngsData.push({\n        name: player.player_name,\n        avg: player.details.total.avg,\n      });\n    });\n    avgOverInngsData.sort((t1, t2) => t2.avg - t1.avg);\n    this.AvgOverInngsData.data = {\n      labels: avgOverInngsData.map(t => t.name),\n      datasets: [{\n        label: 'Average Runs of all Matches',\n        data: avgOverInngsData.map(t => t.avg),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const homeAwayScoreData = [];\n    Object.values(location_bat_odi).forEach((player) => {\n      homeAwayScoreData.push({\n        name: player.player_name,\n        awayAvg: player.details.away.avg,\n        homeAvg: player.details.home.avg,\n      });\n    });\n    this.HomeAwayScoreData.data = {\n      labels: homeAwayScoreData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Away',\n          data: homeAwayScoreData.map(t => t.awayAvg),\n          backgroundColor: 'rgb(255, 224, 230, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 99, 132, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Home',\n          data: homeAwayScoreData.map(t => t.homeAvg),\n          backgroundColor: 'rgb(219, 242, 242, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(75, 192, 192, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        }],\n    };\n\n    const conversionToCenturyData = [];\n    Object.values(location_bat_odi).forEach((player) => {\n      conversionToCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        fifties: player.details.total.fifties,\n      });\n    });\n    this.ConversionToCenturyData.data = {\n      labels: conversionToCenturyData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Half Century',\n          data: conversionToCenturyData.map(t => t.fifties),\n          backgroundColor: 'rgb(255, 224, 230, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 99, 132, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Century',\n          data: conversionToCenturyData.map(t => t.hundreds),\n          backgroundColor: 'rgb(219, 242, 242, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(75, 192, 192, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        },\n      ],\n    };\n\n    const conversionToDoubleCenturyData = [];\n    Object.values(location_bat_odi).forEach((player) => {\n      conversionToDoubleCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        doublecentury: player.details.total.doublecentury,\n      });\n    });\n    this.ConversionToDoubleCenturyData.data = {\n      labels: conversionToDoubleCenturyData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Century',\n          data: conversionToDoubleCenturyData.map(t => t.hundreds),\n          backgroundColor: 'rgb(255, 226, 217, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 159, 64, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 159, 64, 1)',\n        },\n        {\n          label: 'Double Century',\n          data: conversionToDoubleCenturyData.map(t => t.doublecentury),\n          backgroundColor: 'rgb(215, 236, 251, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(54, 162, 235, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(54, 162, 235, 1)',\n        },\n      ],\n    };\n\n    const strikeRateData = [];\n    Object.values(location_bat_odi).forEach((player) => {\n      strikeRateData.push({\n        name: player.player_name,\n        strike_rate: player.details.total.strike_rate,\n      });\n    });\n    strikeRateData.sort((t1, t2) => t2.strike_rate - t1.strike_rate);\n    this.StrikeRateData.data = {\n      labels: strikeRateData.map(t => t.name),\n      datasets: [{\n        label: 'Strike Rate',\n        data: strikeRateData.map(t => t.strike_rate),\n        backgroundColor: [\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const boundariesData = [];\n    Object.values(location_bat_odi).forEach((player) => {\n      boundariesData.push({\n        name: player.player_name,\n        fours: player.details.total.fours,\n        sixes: player.details.total.sixes,\n      });\n    });\n    this.BoundariesData.data = {\n      labels: boundariesData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Fours',\n          data: boundariesData.map(t => t.fours),\n          backgroundColor: 'rgb(255, 226, 217, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 159, 64, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 159, 64, 1)',\n        },\n        {\n          label: 'Sixes',\n          data: boundariesData.map(t => t.sixes),\n          backgroundColor: 'rgb(215, 236, 251, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(54, 162, 235, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(54, 162, 235, 1)',\n        },\n      ],\n    };\n\n    const momData = [];\n    Object.values(location_bat_odi).forEach((player) => {\n      momData.push({\n        name: player.player_name,\n        mom: player.details.total.mom,\n      });\n    });\n    momData.sort((t1, t2) => t2.mom - t1.mom);\n    this.MomData.data = {\n      labels: momData.map(t => t.name),\n      datasets: [{\n        label: 'Man of Match',\n        data: momData.map(t => t.mom),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n  },\n};\n</script>\n\n<style scoped>\n.tags {\n  margin-bottom: 25px;\n  font-size: 12px;\n}\n\n.bottomtags {\n  margin-top: 56px;\n}\n\n.center {\n  text-align: center;\n}\n</style>\n"],"sourceRoot":"src/views"}]}