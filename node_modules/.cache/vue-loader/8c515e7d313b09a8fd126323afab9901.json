{"remainingRequest":"/home/anuradha/sachin-master-blaster/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anuradha/sachin-master-blaster/src/views/BattingTest.vue?vue&type=style&index=0&id=09feb0eb&scoped=true&lang=css&","dependencies":[{"path":"/home/anuradha/sachin-master-blaster/src/views/BattingTest.vue","mtime":1560623294005},{"path":"/home/anuradha/sachin-master-blaster/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.tags {\n  margin-bottom: 20px;\n  font-size: 16px;\n}\n\n.bottomtags {\n  margin-top: 30px;\n}\n\n.center {\n  text-align: center;\n}\n",{"version":3,"sources":["BattingTest.vue"],"names":[],"mappingsqBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"BattingTest.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"batting-test\">\n\n        <div class=\"card center\">\n          <span class=\"title-imp\">Important factors in Test format</span>\n          <hr>\n          <br>\n          <span class=\"result-ps\">1. <b>Conversion 50's into 100's</b> plays an important role in the\n            Test cricket format since it is equally important to score big runs\n          </span>\n          <span class=\"result-ps\">2. <b>Conversion 100's into 200's</b> plays an crucial role in\n            Test cricket format since a double century will give you a powerful win\n          </span>\n          <span class=\"result-ps\">3. <b>Number of 6's & 4's</b> provide runs faster\n            compared to non-boundaries & hence are prefferable when you have to score big\n          </span>\n        </div>\n\n        <el-tag class=\"tags bottomtags\">\n          <b>Consistency of Player:</b>\n          Average runs, Runs at Home VS Away matches & ICC Ranking\n        </el-tag>\n        <div class=\"card\">\n            <PlayerDetailsCard :person=\"focusedPlayerBattingTest\" />\n            <Chart\n            titleText=\"Average Runs Scored\"\n            subTitleText=\"A good average score of all matches is what makes a player dependable\"\n            chartType=\"horizontalBar\"\n            :chartData=\"AvgOverInngsTestData.data\"\n            :chartOptions=\"AvgOverInngsTestData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sir Don Bradman\"\n            titleText=\"average runs scored\"\n            />\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Avg Runs Scored (Home vs Away)\"\n            subTitleText=\"Let's see which player is durable under pressure\"\n            chartType=\"horizontalBar\"\n            :chartData=\"HomeAwayScoreData.data\"\n            :chartOptions=\"HomeAwayScoreData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sir Don Bradman\"\n            titleText=\"scoring under pressure\"\n            />\n            <br/>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Home Score\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Score of a player when he scores in the country of his nationality\">\n              <el-button slot=\"reference\">Define Home Score</el-button>\n            </el-popover>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Away Score\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Score of a player when he scores in the country in whose oppsition\n                        he's playing\">\n              <el-button slot=\"reference\">Define Away Score</el-button>\n            </el-popover>\n        </div>\n\n        <el-tag class=\"tags bottomtags\">\n          <b>Player Dominance:</b>\n          Conversion rate of 50s into 100s, 100s into 200s & Man of the Match Awards\n        </el-tag>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Conversion of 50s to 100s\"\n            subTitleText=\"Let's find ability of a player to play big knocks and provide the\n                          team with the winning runs\"\n            chartType=\"horizontalBar\"\n            :chartData=\"ConversionToCenturyData.data\"\n            :chartOptions=\"ConversionToCenturyData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"It is clearly evident that Sachin Tendulkar is the player who once settled,\n                       goes for the big runs. So it is advisable to restrict him before 50 otherwise\n                       he is more likely to convert that 50 into 100.\"\n            winner=\"Sachin Tendulkar\"\n            titleText=\"scoring big runs\"\n            />\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Conversion 100s to 200s\"\n            subTitleText=\"Let's see who can score a double century\"\n            chartType=\"horizontalBar\"\n            :chartData=\"ConversionToDoubleCenturyData.data\"\n            :chartOptions=\"ConversionToDoubleCenturyData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar\"\n            titleText=\"scoring big runs\"\n            />\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Man of the Match Awards\"\n            subTitleText=\"Most number of Man of the Match Awards determine your\n                          winning contribution\"\n            chartType=\"horizontalBar\"\n            :chartData=\"MomData.data\"\n            :chartOptions=\"MomData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar\"\n            titleText=\"being winning contributor maximum times\"\n            />\n        </div>\n\n        <el-tag class=\"tags bottomtags\">\n          <b>Hitting Strength:</b> Strike Rate, Number of Boundaries\n        </el-tag>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Strike Rate\"\n            subTitleText=\"Scoring runs faster always give an edge, whatever innings maybe\"\n            chartType=\"horizontalBar\"\n            :chartData=\"StrikeRateData.data\"\n            :chartOptions=\"StrikeRateData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sir Viv Richards\"\n            titleText=\"having high strike rate\"\n            />\n            <br/>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Strike Rate\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Batting strike rate is a measure of how frequently a batsman achieves the\n                       primary goal of batting, namely scoring runs\">\n              <el-button slot=\"reference\">Define Strike rate</el-button>\n            </el-popover>\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Number of 4's & 6's\"\n            subTitleText=\"A player who hits more boundaries will score runs faster and probably\n                          much more than others\"\n            chartType=\"horizontalBar\"\n            :chartData=\"BoundariesData.data\"\n            :chartOptions=\"BoundariesData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar\"\n            titleText=\"hitting most boundaries\"\n            />\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"oifokzodpodpdlf\"\n            subTitleText=\"Bowling \"\n            chartType=\"horizontalBar\"\n            :chartData=\"WinPerformance.data\"\n            :chartOptions=\"WinPerformance.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Allan Robert Bonder\"\n            titleText=\"bowling maiden overs maximum times\"\n            />\n            <br>\n            \n        </div>\n\n        <div class=\"card center\">\n          <h1>The Test verdict - Batting</h1>\n          <span class=\"result\"> Sachin Tendulkar Wins !! </span>\n          <span class=\"result-ps\">\n            Maximum number of wins in individual components is by Sachin Tendulkar.\n            <br>\n            Also, he's the one to win in all important factors of\n            Test cricket batting.\n          </span>\n        </div>\n\n    </div>\n</template>\n\n<script>\nimport Chart from '@/components/Chart.vue';\nimport Inference from '@/components/Inference.vue';\nimport PlayerDetailsCard from '@/components/PlayerDetailsCard.vue';\n\nimport locationBatTest from '../../json/locationbattingTest.json';\n\nexport default {\n  name: 'battingTest',\n  components: {\n    Chart,\n    Inference,\n    PlayerDetailsCard,\n  },\n  data() {\n    return {\n      chartContainerStyle: {\n        margin: '10px',\n        width: '45vw',\n        display: 'inline-block',\n      },\n      AvgOverInngsTestData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n          onClick: (evt, item) => {\n            if (item && item[0] && item[0]._index != null) {\n              this.focusedPlayerBattingTest = locationBatTest[item[0]._index];\n            }\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      HomeAwayScoreData: {\n        options: {\n          responsive: true,\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      ConversionToCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n            }],\n            yAxes: [{\n              stacked: true,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      ConversionToDoubleCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n            }],\n            yAxes: [{\n              stacked: true,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      StrikeRateData: {\n        options: {\n          responsive: true,\n         \n          \n        },\n       \n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      BoundariesData: {\n        options: {\n          responsive: true,\n        //   scales: {\n        //     xAxes: [{\n        //         stacked: true\n        //     }],\n        //     yAxes: [{\n        //         stacked: true\n        //     }]\n        //  }\n        },\n      \n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      MomData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n        WinPerformance : {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n            }],\n            yAxes: [{\n              stacked: true,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      },\n     focusedPlayerBattingTest: null,\n    };\n    \n  },\n  mounted() {\n    const avgOverInngsTestData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      avgOverInngsTestData.push({\n        name: player.player_name,\n        avg: player.details.total.avg,\n      });\n    });\n    avgOverInngsTestData.sort((t1, t2) => t2.avg - t1.avg);\n    this.AvgOverInngsTestData.data = {\n      labels: avgOverInngsTestData.map(t => t.name),\n      datasets: [{\n        label: 'Average Runs of all Matches',\n        data: avgOverInngsTestData.map(t => t.avg),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n      \n\n    };\n\n    const homeAwayScoreData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      homeAwayScoreData.push({\n        name: player.player_name,\n        awayAvg: player.details.away.avg,\n        homeAvg: player.details.home.avg,\n      });\n    });\n    this.HomeAwayScoreData.data = {\n      labels: homeAwayScoreData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Away',\n          data: homeAwayScoreData.map(t => t.awayAvg),\n          backgroundColor: 'rgb(255, 224, 34, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 99, 132, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Home',\n          data: homeAwayScoreData.map(t => t.homeAvg),\n          backgroundColor: 'rgb(219, 242, 242, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(75, 192, 192, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        }],\n    };\n\n    const conversionToCenturyData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      conversionToCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        fifties: player.details.total.fifties,\n      });\n    });\n    this.ConversionToCenturyData.data = {\n      labels: conversionToCenturyData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Half Century',\n          data: conversionToCenturyData.map(t => t.fifties),\n          backgroundColor: 'rgb(255, 226, 217, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 159, 64, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 159, 64, 1)',\n        },\n        {\n          label: 'Century',\n          data: conversionToCenturyData.map(t => t.hundreds),\n          backgroundColor: 'rgb(215, 236, 251, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(54, 162, 235, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(54, 162, 235, 1)',\n        },\n      ],\n    };\n\n    const conversionToDoubleCenturyData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      conversionToDoubleCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        doublecentury: player.details.total.doublecentury,\n      });\n    });\n    this.ConversionToDoubleCenturyData.data = {\n      labels: conversionToDoubleCenturyData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Century',\n          data: conversionToDoubleCenturyData.map(t => t.hundreds),\n          backgroundColor: 'rgb(255, 224, 230, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 99, 132, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Double Century',\n          data: conversionToDoubleCenturyData.map(t => t.doublecentury),\n          backgroundColor: 'rgb(219, 242, 242, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(75, 192, 192, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        },\n      ],\n    };\n\n    const strikeRateData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      strikeRateData.push({\n        name: player.player_name,\n        strike_rate: player.details.total.strike_rate,\n      });\n    });\n    strikeRateData.sort((t1, t2) => t2.strike_rate - t1.strike_rate);\n    this.StrikeRateData.data = {\n      labels: strikeRateData.map(t => t.name),\n      datasets: [{\n        label: 'Strike Rate',\n        \n        data: strikeRateData.map(t => t.strike_rate),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const boundariesData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      boundariesData.push({\n        name: player.player_name,\n        fours: player.details.total.fours,\n        sixes: player.details.total.sixes,\n      });\n    });\n    this.BoundariesData.data = {\n      labels: boundariesData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Fours',\n          data: boundariesData.map(t => t.fours),\n          backgroundColor: 'rgb(255, 224, 230, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(255, 99, 132, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Sixes',\n          data: boundariesData.map(t => t.sixes),\n          backgroundColor: 'rgb(219, 242, 242, 0.5)',\n          borderWidth: 0.5,\n          borderColor: 'rgb(75, 192, 192, 1)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        },\n      ],\n    };\n\n    const momData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      momData.push({\n        name: player.player_name,\n        mom: player.details.total.mom,\n      });\n    });\n    momData.sort((t1, t2) => t2.mom - t1.mom);\n    this.MomData.data = {\n      labels: momData.map(t => t.name),\n      datasets: [{\n        label: 'Man of Match',\n        data: momData.map(t => t.mom),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n  const winPerformance = [];\n    Object.values(locationBatTest).forEach((player) => {\n      winPerformance.push({\n        name: player.player_name,\n        percen_win: player.details.total.win_percentage,\n       });\n    });\n    winPerformance.sort((t1, t2) => t2.winPerformance - t1.winPerformance);\n    this.WinPerformance.data = {\n      labels: winPerformance.map(t => t.name),\n      datasets: [\n        {\n          label: 'performance winning factor',\n          data: winPerformance.map(t => t.percen_win),\n          backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n          borderWidth: 0.5,\n          borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n          hoverBorderWidth: 1,\n          hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n       \n        \n        }],\n    };\n },\n};\n  \n</script>\n\n<style scoped>\n.tags {\n  margin-bottom: 20px;\n  font-size: 16px;\n}\n\n.bottomtags {\n  margin-top: 30px;\n}\n\n.center {\n  text-align: center;\n}\n</style>\n"]}]}