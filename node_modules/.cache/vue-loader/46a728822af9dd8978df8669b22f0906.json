{"remainingRequest":"/home/anuradha/sachin-master-blaster/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anuradha/sachin-master-blaster/src/views/BowlingODI.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anuradha/sachin-master-blaster/src/views/BowlingODI.vue","mtime":1560089335691},{"path":"/home/anuradha/sachin-master-blaster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anuradha/sachin-master-blaster/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Chart from '@/components/Chart.vue';\nimport Inference from '@/components/Inference.vue';\nimport PlayerDetailsCard from '@/components/PlayerDetailsCard.vue';\n\nimport locationBowlingODI from '../../json/locationbowlingODI.json';\nimport locationBatODI from '../../json/locationbattingODI.json';\n\nexport default {\n  name: 'bowlingODI',\n  components: {\n    Chart,\n    Inference,\n    PlayerDetailsCard,\n  },\n  data() {\n    return {\n      chartContainerStyle: {\n        margin: '10px',\n        width: '45vw',\n        display: 'inline-block',\n      },\n      EconomyRateData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      StrikeRateData: {\n        options: {\n          responsive: true,\n          onClick: (evt, item) => {\n            if (item && item[0] && item[0]._index != null) {\n              this.focusedPlayer = locationBowlingODI[item[0]._index];\n            }\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      MaidenOverData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      WicketsRunsConcededData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      CatchesTakenData: {\n        options: {\n          responsive: true,\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      focusedPlayer: null,\n    };\n  },\n  mounted() {\n    const economyRateData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      economyRateData.push({\n        name: player.player_name,\n        economy_rate: player.details.total.economy_rate,\n      });\n    });\n    economyRateData.sort((t1, t2) => t1.economy_rate - t2.economy_rate);\n    this.EconomyRateData.data = {\n      labels: economyRateData.map(t => t.name),\n      datasets: [{\n        label: 'Avg Runs Conceded in all Matches',\n        data: economyRateData.map(t => t.economy_rate),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const strikeRateData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      strikeRateData.push({\n        name: player.player_name,\n        strike_rate: player.details.total.strike_rate,\n      });\n    });\n    strikeRateData.sort((t1, t2) => t2.strike_rate - t1.strike_rate);\n    this.StrikeRateData.data = {\n      labels: strikeRateData.map(t => t.name),\n      datasets: [{\n        label: 'Strike Rate',\n        data: strikeRateData.map(t => t.strike_rate),\n        backgroundColor: [\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const maidenOverData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      maidenOverData.push({\n        name: player.player_name,\n        maiden_overs: (player.details.total.maiden_overs / player.details.total.overs) * 100,\n      });\n    });\n    maidenOverData.sort((t1, t2) => t2.maiden_overs - t1.maiden_overs);\n    this.MaidenOverData.data = {\n      labels: maidenOverData.map(t => t.name),\n      datasets: [{\n        label: 'Percentage of Average Maiden Overs',\n        data: maidenOverData.map(t => t.maiden_overs),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const wicketsRunsConcededData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      wicketsRunsConcededData.push({\n        name: player.player_name,\n        wickets: (player.details.total.wickets / player.details.total.runs_conceded) * 100,\n      });\n    });\n    wicketsRunsConcededData.sort((t1, t2) => t1.wickets - t2.wickets);\n    this.WicketsRunsConcededData.data = {\n      labels: wicketsRunsConcededData.map(t => t.name),\n      datasets: [{\n        label: 'Percentage of wickets taken for runs conceded',\n        data: wicketsRunsConcededData.map(t => t.wickets),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const catchesTakenData = [];\n    Object.values(locationBatODI).forEach((player) => {\n      catchesTakenData.push({\n        name: player.player_name,\n        catches_taken: player.details.total.catches_taken,\n      });\n    });\n    catchesTakenData.sort((t1, t2) => t2.catches_taken - t1.catches_taken);\n    this.CatchesTakenData.data = {\n      labels: catchesTakenData.map(t => t.name),\n      datasets: [{\n        label: 'Strike Rate',\n        data: catchesTakenData.map(t => t.catches_taken),\n        backgroundColor: [\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n  },\n};\n",{"version":3,"sources":["BowlingODI.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"BowlingODI.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"bowling-odi\">\n\n      <div class=\"card\">\n            <PlayerDetailsCard :person=\"focusedPlayer\" />\n            <Chart\n            titleText=\"Bowling Strike Rate\"\n            subTitleText=\"Getting batsman out faster is primary target\"\n            chartType=\"line\"\n            :chartData=\"StrikeRateData.data\"\n            :chartOptions=\"StrikeRateData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"both Michael Bevan & Sachin Tendulkar\"\n            titleText=\"having high strike rate\"\n            />\n            <br/>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Strike Rate\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Bowling strike rate is a measure of how frequently a\n                       bowler achieves the primary goal of bowling, namely taking wickets \">\n              <el-button slot=\"reference\">Define Strike rate</el-button>\n            </el-popover>\n        </div>\n\n      <div class=\"card\">\n            <Chart\n            titleText=\"Economy Rate\"\n            subTitleText=\"Lesser number of runs conceded symbolizes a good bowler\"\n            chartType=\"bar\"\n            :chartData=\"EconomyRateData.data\"\n            :chartOptions=\"EconomyRateData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"Though score of Ricky Ponting looks better but he bowled in only 25 overs\n                       & others bowled in atleast 300 overs.\"\n            winner=\"Sir Viv Richards\"\n            titleText=\"average runs conceded\"\n            />\n            <br>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Economy rate\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"Economy rate is the average number of runs conceded per over\n                      in cricket. The calculation is (Econ = Runs/Overs bowled).\">\n              <el-button slot=\"reference\">Define Economy rate</el-button>\n            </el-popover>\n      </div>\n\n      <div class=\"card\">\n            <Chart\n            titleText=\"Average Maiden Overs\"\n            subTitleText=\"Bowling a maiden over in ODI is very important and difficult\"\n            chartType=\"bar\"\n            :chartData=\"MaidenOverData.data\"\n            :chartOptions=\"MaidenOverData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sir Viv Richards & Sachin Tendulkar\"\n            titleText=\"bowling maiden overs maximum times\"\n            />\n            <br>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Maiden over\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\"A maiden over is one in which no  runs are scored.\">\n              <el-button slot=\"reference\">Define Maiden over</el-button>\n            </el-popover>\n        </div>\n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Bowling Average\"\n            subTitleText=\"Lower the bowling average is, the better the bowler is performing\"\n            chartType=\"bar\"\n            :chartData=\"WicketsRunsConcededData.data\"\n            :chartOptions=\"WicketsRunsConcededData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar & Michael Bevan\"\n            titleText=\"bowling average\"\n            />\n            <br>\n            <el-popover\n              placement=\"top-start\"\n              title=\"Bowling Average\"\n              width=\"200\"\n              trigger=\"hover\"\n              content=\" Number of wickets taken for runs  conceded in all matches.\">\n              <el-button slot=\"reference\">Define Bowling Average</el-button>\n            </el-popover>\n      </div>\n\n      <div class=\"card\">\n            <Chart\n            titleText=\"Catches Taken\"\n            subTitleText=\"More catches taken symbolizes a good fielder\"\n            chartType=\"bar\"\n            :chartData=\"CatchesTakenData.data\"\n            :chartOptions=\"CatchesTakenData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar & Ricky Ponting\"\n            titleText=\"catches taken\"\n            />\n      </div>\n\n      <div class=\"card center\">\n          <h1>The ODI verdict - Bowling</h1>\n          <span class=\"result\"> Sachin Tendulkar Wins !! </span>\n          <span class=\"result-ps\">\n            Maximum number of wins in individual components is neutral.\n            <br>\n            But, Sachin Tendulkar is second in all factors & hence the winner.\n          </span>\n      </div>\n\n  </div>\n</template>\n\n<script>\nimport Chart from '@/components/Chart.vue';\nimport Inference from '@/components/Inference.vue';\nimport PlayerDetailsCard from '@/components/PlayerDetailsCard.vue';\n\nimport locationBowlingODI from '../../json/locationbowlingODI.json';\nimport locationBatODI from '../../json/locationbattingODI.json';\n\nexport default {\n  name: 'bowlingODI',\n  components: {\n    Chart,\n    Inference,\n    PlayerDetailsCard,\n  },\n  data() {\n    return {\n      chartContainerStyle: {\n        margin: '10px',\n        width: '45vw',\n        display: 'inline-block',\n      },\n      EconomyRateData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      StrikeRateData: {\n        options: {\n          responsive: true,\n          onClick: (evt, item) => {\n            if (item && item[0] && item[0]._index != null) {\n              this.focusedPlayer = locationBowlingODI[item[0]._index];\n            }\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      MaidenOverData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      WicketsRunsConcededData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n              },\n              barThickness: 50,\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      CatchesTakenData: {\n        options: {\n          responsive: true,\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      focusedPlayer: null,\n    };\n  },\n  mounted() {\n    const economyRateData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      economyRateData.push({\n        name: player.player_name,\n        economy_rate: player.details.total.economy_rate,\n      });\n    });\n    economyRateData.sort((t1, t2) => t1.economy_rate - t2.economy_rate);\n    this.EconomyRateData.data = {\n      labels: economyRateData.map(t => t.name),\n      datasets: [{\n        label: 'Avg Runs Conceded in all Matches',\n        data: economyRateData.map(t => t.economy_rate),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const strikeRateData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      strikeRateData.push({\n        name: player.player_name,\n        strike_rate: player.details.total.strike_rate,\n      });\n    });\n    strikeRateData.sort((t1, t2) => t2.strike_rate - t1.strike_rate);\n    this.StrikeRateData.data = {\n      labels: strikeRateData.map(t => t.name),\n      datasets: [{\n        label: 'Strike Rate',\n        data: strikeRateData.map(t => t.strike_rate),\n        backgroundColor: [\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const maidenOverData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      maidenOverData.push({\n        name: player.player_name,\n        maiden_overs: (player.details.total.maiden_overs / player.details.total.overs) * 100,\n      });\n    });\n    maidenOverData.sort((t1, t2) => t2.maiden_overs - t1.maiden_overs);\n    this.MaidenOverData.data = {\n      labels: maidenOverData.map(t => t.name),\n      datasets: [{\n        label: 'Percentage of Average Maiden Overs',\n        data: maidenOverData.map(t => t.maiden_overs),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const wicketsRunsConcededData = [];\n    Object.values(locationBowlingODI).forEach((player) => {\n      wicketsRunsConcededData.push({\n        name: player.player_name,\n        wickets: (player.details.total.wickets / player.details.total.runs_conceded) * 100,\n      });\n    });\n    wicketsRunsConcededData.sort((t1, t2) => t1.wickets - t2.wickets);\n    this.WicketsRunsConcededData.data = {\n      labels: wicketsRunsConcededData.map(t => t.name),\n      datasets: [{\n        label: 'Percentage of wickets taken for runs conceded',\n        data: wicketsRunsConcededData.map(t => t.wickets),\n        backgroundColor: [\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const catchesTakenData = [];\n    Object.values(locationBatODI).forEach((player) => {\n      catchesTakenData.push({\n        name: player.player_name,\n        catches_taken: player.details.total.catches_taken,\n      });\n    });\n    catchesTakenData.sort((t1, t2) => t2.catches_taken - t1.catches_taken);\n    this.CatchesTakenData.data = {\n      labels: catchesTakenData.map(t => t.name),\n      datasets: [{\n        label: 'Strike Rate',\n        data: catchesTakenData.map(t => t.catches_taken),\n        backgroundColor: [\n          'rgb(219, 242, 242, 0.5)',\n          'rgb(215, 236, 251, 0.5)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(255, 224, 230, 0.5)',\n          'rgb(255, 226, 217, 0.5)',\n          'rgb(255, 245, 221, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n  },\n};\n</script>\n\n<style>\n.center {\n  text-align: center;\n}\n</style>\n"]}]}