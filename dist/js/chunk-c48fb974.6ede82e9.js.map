{"version":3,"sources":["webpack:///./src/views/BattingTest.vue?61c8","webpack:///src/views/BattingTest.vue","webpack:///./src/views/BattingTest.vue?1017","webpack:///./src/views/BattingTest.vue","webpack:///./src/views/BattingTest.vue?1f6f","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///./src/components/PlayerDetailsCard.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_m","attrs","person","focusedPlayerBattingTest","titleText","subTitleText","chartType","chartData","AvgOverInngsTestData","data","chartOptions","options","parentStyle","chartContainerStyle","inference","winner","HomeAwayScoreData","_v","ConversionToCenturyData","ConversionToDoubleCenturyData","StrikeRateData","BoundariesData","WinPerformance","staticRenderFns","BattingTestvue_type_script_lang_js_","name","components","Chart","Inference","PlayerDetailsCard","_this","margin","width","display","scaleFontColor","responsive","scales","xAxes","ticks","beginAtZero","maxRotation","minRotation","gridLines","offsetGridLines","color","barThickness","yAxes","stacked","onClick","evt","item","_index","locationbattingTest","labels","datasets","MomData","mounted","avgOverInngsTestData","Object","values","forEach","player","push","player_name","avg","details","total","sort","t1","t2","map","t","label","backgroundColor","borderWidth","borderColor","hoverBorderWidth","hoverBorderColor","homeAwayScoreData","awayAvg","away","homeAvg","home","conversionToCenturyData","hundreds","fifties","conversionToDoubleCenturyData","doublecentury","strikeRateData","strike_rate","boundariesData","fours","sixes","momData","mom","winPerformance","percen_win","win_percentage","views_BattingTestvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_BattingTest_vue_vue_type_style_index_0_id_2e7d008b_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_BattingTest_vue_vue_type_style_index_0_id_2e7d008b_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default","n","fails","module","exports","method","arg","call","$export","aFunction","toObject","$sort","test","P","F","undefined","comparefn","_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_0__","script"],"mappings":"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","file":"js/chunk-c48fb974.6ede82e9.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"batting-test\"},[_vm._m(0),_c('br'),_c('br'),_c('br'),_c('div',{staticClass:\"card\"},[_c('PlayerDetailsCard',{attrs:{\"person\":_vm.focusedPlayerBattingTest}}),_c('Chart',{attrs:{\"titleText\":\"Average Runs Scored\",\"subTitleText\":\"A good average score of all matches is what makes a player dependable\",\"chartType\":\"horizontalBar\",\"chartData\":_vm.AvgOverInngsTestData.data,\"chartOptions\":_vm.AvgOverInngsTestData.options,\"parentStyle\":_vm.chartContainerStyle}}),_c('Inference',{attrs:{\"inference\":\"Average Run\",\"titleText\":\"Batting Average: Runs divided by (number of times out) = Runs divided by (Innings - Not Outs).\",\"winner\":\"Sir Don Bradman has the highest average amongst all the respective players.\"}})],1),_c('br'),_c('br'),_c('div',{staticClass:\"card\"},[_c('Chart',{attrs:{\"titleText\":\"Avg Runs Scored (HomeGround vs Abroad)\",\"subTitleText\":\"According to a research, the players playing environment such as home ground or abroad ground plays a very important role, and the key \\n            factor of discussion is Motivation\",\"chartType\":\"horizontalBar\",\"chartData\":_vm.HomeAwayScoreData.data,\"chartOptions\":_vm.HomeAwayScoreData.options,\"parentStyle\":_vm.chartContainerStyle}}),_c('Inference',{attrs:{\"winner\":\"Sir Don Bradman is the winner in the following category.\",\"inference\":\"Scoring under pressure\",\"titleText\":\"Motivation plays a key role in the performance of a player, and it is gained by audience watching the game especially the ground spectators \\n            who are rooting and cheering for their players.Thus a player even with less cheering, if is able to play good, shows anything hardly matters to him on a personal level.\"}}),_vm._v(\".\\n           \"),_c('br'),_c('br'),_c('br')],1),_c('br'),_c('br'),_c('br'),_c('div',{staticClass:\"card\"},[_c('Chart',{attrs:{\"titleText\":\"Conversion of 50s to 100s\",\"subTitleText\":\"THe more easily a player scores 100's and 50's , the hardest the target becomes for the opposite team to achieve. \",\"chartType\":\"horizontalBar\",\"chartData\":_vm.ConversionToCenturyData.data,\"chartOptions\":_vm.ConversionToCenturyData.options,\"parentStyle\":_vm.chartContainerStyle}}),_c('Inference',{attrs:{\"inference\":\"The essence of 100's and 50's\",\"winner\":\"Sachin Tendulkar has the fastest rate among all the players.\",\"titleText\":\"A half-century and a full-century is very important milestone in a match for a player.\"}})],1),_c('br'),_c('br'),_c('br'),_c('div',{staticClass:\"card\"},[_c('Chart',{attrs:{\"titleText\":\"Conversion 100s to 200s\",\"subTitleText\":\"If a player is able to retain scoring at a fast rate such that he scores a double century without getting tired, \\n            it potrays the muscle strength the player has.\",\"chartType\":\"horizontalBar\",\"chartData\":_vm.ConversionToDoubleCenturyData.data,\"chartOptions\":_vm.ConversionToDoubleCenturyData.options,\"parentStyle\":_vm.chartContainerStyle}}),_c('Inference',{attrs:{\"winner\":\"Sachin Tendulkar has the rate among all the players.\",\"titleText\":\"A conversion rate where the player transforms the century to double century is very rare and important.\",\"inference\":\"The importance of double century\"}})],1),_c('br'),_c('br'),_c('br'),_c('div',{staticClass:\"card\"},[_c('Chart',{attrs:{\"titleText\":\"Strike Rate\",\"subTitleText\":\"Scoring runs faster always give an edge, whatever innings maybe\",\"chartType\":\"horizontalBar\",\"chartData\":_vm.StrikeRateData.data,\"chartOptions\":_vm.StrikeRateData.options,\"parentStyle\":_vm.chartContainerStyle}}),_c('Inference',{attrs:{\"winner\":\"Sir Viv Richards has the highest Strike rate amongst all the players.\",\"titleText\":\" Batting strike rate is a measure of how frequently a batsman achieves the primary goal of batting, namely scoring runs.\",\"inference\":\"Strike Rate\"}}),_c('br')],1),_c('br'),_c('br'),_c('br'),_c('div',{staticClass:\"card\"},[_c('Chart',{attrs:{\"titleText\":\"Ratio of 4's to 6's\",\"subTitleText\":\"A player who hits more boundaries will score runs faster and probably\\n                          much more than others\",\"chartType\":\"horizontalBar\",\"chartData\":_vm.BoundariesData.data,\"chartOptions\":_vm.BoundariesData.options,\"parentStyle\":_vm.chartContainerStyle}}),_c('Inference',{attrs:{\"winner\":\"Sachin Tendulkar has the highest number of fours and sixes.\",\"titleText\":\"The high no. of fours and sixes determine easy target chase or target plan for the oppposing team, thus it is very important factor.\",\"inference\":\"Four's and Sixes's\"}})],1),_c('br'),_c('br'),_c('br'),_c('div',{staticClass:\"card\"},[_c('Chart',{attrs:{\"titleText\":\"Performance Contribution\",\"subTitleText\":\"The chart represents no. of wins Sachin and following players achieved while acting as the team Captain \",\"chartType\":\"horizontalBar\",\"chartData\":_vm.WinPerformance.data,\"chartOptions\":_vm.WinPerformance.options,\"parentStyle\":_vm.chartContainerStyle}}),_c('Inference',{attrs:{\"winner\":\"Sir Don Bradman has the highest no. of win as a captain\",\"titleText\":\"Being a good player does not necessarily mean that a player is a good captain too.Thus Captaincy can be whole lot challenging\",\"inference\":\"Performance Measure\"}}),_c('br')],1),_c('br'),_c('br'),_c('br'),_vm._m(1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"card-center\"},[_c('span',{staticClass:\"title-imp\"},[_vm._v(\"Factors determining the performance of players in Test Match\")]),_c('hr'),_c('br'),_c('span',{staticClass:\"result-ps\"},[_vm._v(\"1. Conversion of 50's into 100's plays an important role in the\\n         game as it gives big boost to the score.\\n          \")]),_c('span',{staticClass:\"result-ps\"},[_vm._v(\"2. Conversion 100's into 200's plays an crucial role in\\n            Test cricket format shows the strength of the player, as he continues to score big even after playing for long.\\n          \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"card-bottom\"},[_c('h1',[_vm._v(\"  Elemental Conclusion - Batting Test\")]),_c('span',{staticClass:\"result\"},[_vm._v(\" Sachin Tendulkar Won most of the category \")])])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"batting-test\">\n\n        <div class=\"card-center\">\n          <span class=\"title-imp\">Factors determining the performance of players in Test Match</span>\n          <hr>\n          <br>\n          <span class=\"result-ps\">1. Conversion of 50's into 100's plays an important role in the\n         game as it gives big boost to the score.\n          </span>\n          <span class=\"result-ps\">2. Conversion 100's into 200's plays an crucial role in\n            Test cricket format shows the strength of the player, as he continues to score big even after playing for long.\n          </span>\n         </div>\n        <br>\n        <br>\n        <br>\n        \n        \n        <div class=\"card\">\n            <PlayerDetailsCard :person=\"focusedPlayerBattingTest\" />\n            <Chart\n            titleText=\"Average Runs Scored\"\n            subTitleText=\"A good average score of all matches is what makes a player dependable\"\n            chartType=\"horizontalBar\"\n            :chartData=\"AvgOverInngsTestData.data\"\n            :chartOptions=\"AvgOverInngsTestData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"Average Run\"\n            titleText=\"Batting Average: Runs divided by (number of times out) = Runs divided by (Innings - Not Outs).\"\n            winner=\"Sir Don Bradman has the highest average amongst all the respective players.\"\n            />\n        </div>\n        <br\n        <br>\n        <br>\n        \n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Avg Runs Scored (HomeGround vs Abroad)\"\n            subTitleText=\"According to a research, the players playing environment such as home ground or abroad ground plays a very important role, and the key \n            factor of discussion is Motivation\"\n            chartType=\"horizontalBar\"\n            :chartData=\"HomeAwayScoreData.data\"\n            :chartOptions=\"HomeAwayScoreData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sir Don Bradman is the winner in the following category.\"\n            inference=\"Scoring under pressure\"\n            titleText=\"Motivation plays a key role in the performance of a player, and it is gained by audience watching the game especially the ground spectators \n            who are rooting and cheering for their players.Thus a player even with less cheering, if is able to play good, shows anything hardly matters to him on a personal level.\"\n            />.\n           <br>\n        <br>\n        <br>\n        \n        </div>\n\n<br>\n        <br>\n        <br>\n        \n        \n        <div class=\"card\">\n            <Chart\n            titleText=\"Conversion of 50s to 100s\"\n            subTitleText=\"THe more easily a player scores 100's and 50's , the hardest the target becomes for the opposite team to achieve. \"\n            chartType=\"horizontalBar\"\n            :chartData=\"ConversionToCenturyData.data\"\n            :chartOptions=\"ConversionToCenturyData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            inference=\"The essence of 100's and 50's\"\n            winner=\"Sachin Tendulkar has the fastest rate among all the players.\"\n            titleText=\"A half-century and a full-century is very important milestone in a match for a player.\"\n            />\n        </div>\n       <br>\n        <br>\n        <br>\n        \n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Conversion 100s to 200s\"\n            subTitleText=\"If a player is able to retain scoring at a fast rate such that he scores a double century without getting tired, \n            it potrays the muscle strength the player has.\"\n            chartType=\"horizontalBar\"\n            :chartData=\"ConversionToDoubleCenturyData.data\"\n            :chartOptions=\"ConversionToDoubleCenturyData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar has the rate among all the players.\"\n            titleText=\"A conversion rate where the player transforms the century to double century is very rare and important.\"\n            inference=\"The importance of double century\"\n            />\n        </div>\n       <br>\n        <br>\n        <br>\n        \n\n      <div class=\"card\">\n            <Chart\n            titleText=\"Strike Rate\"\n            subTitleText=\"Scoring runs faster always give an edge, whatever innings maybe\"\n            chartType=\"horizontalBar\"\n            :chartData=\"StrikeRateData.data\"\n            :chartOptions=\"StrikeRateData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sir Viv Richards has the highest Strike rate amongst all the players.\"\n            titleText=\" Batting strike rate is a measure of how frequently a batsman achieves the primary goal of batting, namely scoring runs.\"\n            inference=\"Strike Rate\"\n            />\n            <br/>\n            \n        </div>\n        <br>\n        <br>\n        <br>\n        \n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Ratio of 4's to 6's\"\n            subTitleText=\"A player who hits more boundaries will score runs faster and probably\n                          much more than others\"\n            chartType=\"horizontalBar\"\n            :chartData=\"BoundariesData.data\"\n            :chartOptions=\"BoundariesData.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sachin Tendulkar has the highest number of fours and sixes.\"\n            titleText=\"The high no. of fours and sixes determine easy target chase or target plan for the oppposing team, thus it is very important factor.\"\n            inference=\"Four's and Sixes's\"\n            />\n        </div>\n       <br>\n        <br>\n        <br>\n        \n\n        <div class=\"card\">\n            <Chart\n            titleText=\"Performance Contribution\"\n            subTitleText=\"The chart represents no. of wins Sachin and following players achieved while acting as the team Captain \"\n            chartType=\"horizontalBar\"\n            :chartData=\"WinPerformance.data\"\n            :chartOptions=\"WinPerformance.options\"\n            :parentStyle=\"chartContainerStyle\"\n            />\n            <Inference\n            winner=\"Sir Don Bradman has the highest no. of win as a captain\"\n            titleText=\"Being a good player does not necessarily mean that a player is a good captain too.Thus Captaincy can be whole lot challenging\"\n            inference=\"Performance Measure\"\n            />\n            <br>\n            \n        </div>\n        <br>\n        <br>\n        <br>\n        \n<div class=\"card-bottom\">\n          <h1>  Elemental Conclusion - Batting Test</h1>\n          <span class=\"result\"> Sachin Tendulkar Won most of the category </span>\n          \n        </div>\n\n    </div>\n</template>\n\n<script>\nimport Chart from '@/components/Chart.vue';\nimport Inference from '@/components/Inference.vue';\nimport PlayerDetailsCard from '@/components/PlayerDetailsCard.vue';\n\nimport locationBatTest from '../../json/locationbattingTest.json';\n\nexport default {\n  name: 'battingTest',\n  components: {\n    Chart,\n    Inference,\n    PlayerDetailsCard,\n  },\n  data() {\n    return {\n      chartContainerStyle: {\n        margin: '10px',\n        width: '45vw',\n        display: 'inline-block',\n        scaleFontColor: 'white',\n      },\n      AvgOverInngsTestData: {\n        options: {\n           scaleFontColor: 'white',\n          responsive: true,\n          scales: {\n            xAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxRotation: 0,\n                minRotation: 0,\n              },\n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n              barThickness: 50,\n            }],\n            yAxes: [{\n              stacked: true,\n              \n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n          },\n          onClick: (evt, item) => {\n            if (item && item[0] && item[0]._index != null) {\n              this.focusedPlayerBattingTest = locationBatTest[item[0]._index];\n            }\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      HomeAwayScoreData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n            yAxes: [{\n              stacked: true,\n              \n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n            \n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      ConversionToCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n            yAxes: [{\n              stacked: true,\n              \n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n            \n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      ConversionToDoubleCenturyData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              color: 'rgba(255, 0, 0, 1)',\n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n            yAxes: [{\n              stacked: true,\n              color: 'rgba(255, 0, 0, 1)',\n               gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      StrikeRateData: {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              color: 'rgba(255, 0, 0, 1)',\n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n            yAxes: [{\n              stacked: true,\n              color: 'rgba(255, 0, 0, 1)',\n               gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n          },\n         \n          \n        },\n       \n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      BoundariesData: {\n        options: {\n          responsive: true,\n         scales: {\n           xAxes: [{\n                 stacked: true,\n                 color: 'rgba(255, 0, 0, 1)',\n                 gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n             }],\n             yAxes: [{\n                 stacked: true,\n                 color: 'rgba(255, 0, 0, 1)',\n                  gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n             }]\n          }\n        },\n      \n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      MomData: {\n        options: {\n          responsive: true,\n          scales: {\n           xAxes: [{\n                 stacked: true,\n                 color: 'rgba(255, 0, 0, 1)',\n                 gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n             }],\n             yAxes: [{\n                 stacked: true,\n                 color: 'rgba(255, 0, 0, 1)',\n                  gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n             }]\n          }\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n\n      WinPerformance : {\n        options: {\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            \n            }],\n            yAxes: [{\n              stacked: true,\n              gridLines: {\n                offsetGridLines: true,\n                color: 'rgba(255, 0, 0, 1)'\n              },\n            }],\n          },\n        },\n        data: {\n          labels: [],\n          datasets: [],\n        },\n      },\n      \n     focusedPlayerBattingTest: null,\n    };\n    \n  },\n  mounted() {\n    const avgOverInngsTestData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      avgOverInngsTestData.push({\n        name: player.player_name,\n        avg: player.details.total.avg,\n      });\n    });\n    avgOverInngsTestData.sort((t1, t2) => t2.avg - t1.avg);\n    this.AvgOverInngsTestData.data = {\n      labels: avgOverInngsTestData.map(t => t.name),\n      datasets: [{\n        label: 'Average Runs of all Matches',\n        data: avgOverInngsTestData.map(t => t.avg),\n        backgroundColor: [\n          'rgb(218,20,255)',\n          'rgb(57,255,20)',\n          'rgb(255,255,0)',\n          'rgb(0,255,255)',\n          'rgb(255,128,0)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 2,\n        borderColor: [\n          'rgb(243,179,255)',\n          'rgb(12,79,0)',\n          'rgb(255,123,0)',\n          'rgb(0,107,255)',\n          'rgb(255,170,0)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n      \n\n    };\n\n    const homeAwayScoreData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      homeAwayScoreData.push({\n        name: player.player_name,\n        awayAvg: player.details.away.avg,\n        homeAvg: player.details.home.avg,\n      });\n    });\n    this.HomeAwayScoreData.data = {\n      labels: homeAwayScoreData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Away',\n          data: homeAwayScoreData.map(t => t.awayAvg),\n          backgroundColor: 'rgb(0,213,255)',\n          borderWidth: 2,\n          borderColor: 'rgb(0,100,120)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Home',\n          data: homeAwayScoreData.map(t => t.homeAvg),\n          backgroundColor: 'rgb(255,105,105)',\n          borderWidth: 2,\n          borderColor: 'rgb(255,105,105)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        }],\n    };\n\n    const conversionToCenturyData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      conversionToCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        fifties: player.details.total.fifties,\n      });\n    });\n    this.ConversionToCenturyData.data = {\n      labels: conversionToCenturyData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Half Century',\n          data: conversionToCenturyData.map(t => t.fifties),\n          backgroundColor: 'rgb(0,213,255)',\n          borderWidth: 2,\n          borderColor: 'rgb(0,100,120)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 159, 64, 1)',\n        },\n        {\n          label: 'Century',\n          data: conversionToCenturyData.map(t => t.hundreds),\n          backgroundColor: 'rgb(255,105,105)',\n          borderWidth: 2,\n          borderColor: 'rgb(255,105,105)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(54, 162, 235, 1)',\n        },\n      ],\n    };\n\n    const conversionToDoubleCenturyData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      conversionToDoubleCenturyData.push({\n        name: player.player_name,\n        hundreds: player.details.total.hundreds,\n        doublecentury: player.details.total.doublecentury,\n      });\n    });\n    this.ConversionToDoubleCenturyData.data = {\n      labels: conversionToDoubleCenturyData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Century',\n          data: conversionToDoubleCenturyData.map(t => t.hundreds),\n          backgroundColor: 'rgb(0,213,255)',\n          borderWidth: 2,\n          borderColor: 'rgb(0,100,120)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Double Century',\n          data: conversionToDoubleCenturyData.map(t => t.doublecentury),\n          backgroundColor: 'rgb(255,105,105)',\n          borderWidth: 2,\n          borderColor: 'rgb(255,105,105)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        },\n      ],\n    };\n\n    const strikeRateData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      strikeRateData.push({\n        name: player.player_name,\n        strike_rate: player.details.total.strike_rate,\n      });\n    });\n    strikeRateData.sort((t1, t2) => t2.strike_rate - t1.strike_rate);\n    this.StrikeRateData.data = {\n      labels: strikeRateData.map(t => t.name),\n      datasets: [{\n        label: 'Strike Rate',\n        \n        data: strikeRateData.map(t => t.strike_rate),\n        backgroundColor: [\n          'rgb(218,20,255)',\n          'rgb(57,255,20)',\n          'rgb(255,255,0)',\n          'rgb(0,255,255)',\n          'rgb(255,128,0)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 2,\n        borderColor: [\n          'rgb(243,179,255)',\n          'rgb(12,79,0)',\n          'rgb(255,123,0)',\n          'rgb(0,107,255)',\n          'rgb(255,170,0)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 1.2,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n\n    const boundariesData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      boundariesData.push({\n        name: player.player_name,\n        fours: player.details.total.fours,\n        sixes: player.details.total.sixes,\n      });\n    });\n    this.BoundariesData.data = {\n      labels: boundariesData.map(t => t.name),\n      datasets: [\n        {\n          label: 'Fours',\n          data: boundariesData.map(t => t.fours),\n          backgroundColor: 'rgb(0,213,255)',\n          borderWidth: 2,\n          borderColor: 'rgb(0,100,120)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(255, 99, 132, 1)',\n        },\n        {\n          label: 'Sixes',\n          data: boundariesData.map(t => t.sixes),\n          backgroundColor:'rgb(255,105,105)',\n          borderWidth: 2,\n          borderColor: 'rgb(255,105,105)',\n          hoverBorderWidth: 1,\n          hoverBorderColor: 'rgb(75, 192, 192, 1)',\n        },\n      ],\n    };\n\n    const momData = [];\n    Object.values(locationBatTest).forEach((player) => {\n      momData.push({\n        name: player.player_name,\n        mom: player.details.total.mom,\n      });\n    });\n    momData.sort((t1, t2) => t2.mom - t1.mom);\n    this.MomData.data = {\n      labels: momData.map(t => t.name),\n      datasets: [{\n        label: 'Man of Match',\n        data: momData.map(t => t.mom),\n        backgroundColor: [\n         'rgb(218,20,255)',\n          'rgb(57,255,20)',\n          'rgb(255,255,0)',\n          'rgb(0,255,255)',\n          'rgb(255,128,0)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n        borderWidth: 0.8,\n        borderColor: [\n          'rgb(243,179,255)',\n          'rgb(12,79,0)',\n          'rgb(255,123,0)',\n          'rgb(0,107,255)',\n          'rgb(255,170,0)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n        hoverBorderWidth: 0,\n        hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n      }],\n    };\n  const winPerformance = [];\n    Object.values(locationBatTest).forEach((player) => {\n      winPerformance.push({\n        name: player.player_name,\n        percen_win: player.details.total.win_percentage,\n       });\n    });\n    winPerformance.sort((t1, t2) => t2.winPerformance - t1.winPerformance);\n    this.WinPerformance.data = {\n      labels: winPerformance.map(t => t.name),\n      datasets: [\n        {\n          label: 'performance winning factor',\n          data: winPerformance.map(t => t.percen_win),\n          backgroundColor: [\n         'rgb(218,20,255)',\n          'rgb(57,255,20)',\n          'rgb(255,255,0)',\n          'rgb(0,255,255)',\n          'rgb(255,128,0)',\n          'rgb(235, 224, 255, 0.5)',\n          'rgb(244, 245, 245, 0.5)',\n        ],\n          borderWidth: 0.5,\n          borderColor: [\n          'rgb(243,179,255)',\n          'rgb(12,79,0)',\n          'rgb(255,123,0)',\n          'rgb(0,107,255)',\n          'rgb(255,170,0)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n          hoverBorderWidth: 1,\n          hoverBorderColor: [\n          'rgb(255, 99, 132, 1)',\n          'rgb(255, 159, 64, 1)',\n          'rgb(255, 205, 86, 1)',\n          'rgb(75, 192, 192, 1)',\n          'rgb(54, 162, 235, 1)',\n          'rgb(153, 102, 255, 1)',\n          'rgb(201, 203, 207, 1)',\n        ],\n       \n        \n        }],\n    };\n },\n};\n  \n</script>\n\n<style scoped>\n.tags {\n  margin-bottom: 20px;\n  font-size: 0px;\n  color:rgb(19, 20, 36);\n}\n\n.batting-test{\n background-color: rgb(19, 20, 36);\n background-position: 0%\n}\n\n.bottomtags {\n  margin-top: 10px;\n}\n\n.center {\n  text-align: center;\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BattingTest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BattingTest.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BattingTest.vue?vue&type=template&id=2e7d008b&scoped=true&\"\nimport script from \"./BattingTest.vue?vue&type=script&lang=js&\"\nexport * from \"./BattingTest.vue?vue&type=script&lang=js&\"\nimport style0 from \"./BattingTest.vue?vue&type=style&index=0&id=2e7d008b&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2e7d008b\",\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BattingTest.vue?vue&type=style&index=0&id=2e7d008b&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BattingTest.vue?vue&type=style&index=0&id=2e7d008b&scoped=true&lang=css&\"","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","var render, staticRenderFns\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}